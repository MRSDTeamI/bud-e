"""autogenerated by genpy from hearbo_cart_msgs/CartCommand.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CartCommand(genpy.Message):
  _md5sum = "59937212c7ecdba57a473a75da70fa95"
  _type = "hearbo_cart_msgs/CartCommand"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#
# iXs cart control message
#

#
# Some pre-defined parameters
#

uint8 FALSE=0
uint8 TRUE=1

# ====================================================================================
# Message structure setting
# ====================================================================================

#
# valid : 
# 
# Major selection of message structure sent to the robot.
# You can set the following three commands valid/invalid.
# (1) Commands for drive (steering angle, velocity of driving wheels, selection of free/driven motors)
# (2) Gain of each motor
# (3) Motor selection for encoder value reset
# Those three settings do not have to be sent to the robot simultaneously.
#
# Example1
# If you want to only change the gain, set "gain_flag" TRUE.
#
# Example2
# If you want to change both velocity and gain of the motors, set "gain_flag" and "drive_flag" TRUE. 
# 

uint8 drive_flag
uint8 gain_flag
uint8 encoder_flag

# ====================================================================================
# Message when drive_flag is TRUE
# ====================================================================================

#
# drive_mode : cart control mode
#
# STOP_MODE : 
# This set all the gain zero (Encoder is not reset)
#
# TURN_MODE : 
# Spin rotation mode (Desired encoder values of steering motors is fixed for spinning)
#
# DRIVE_MODE : 
# Steering syncronization mode (Desired encoder values of steering motors are set to be the same.)
#
# MANUAL_MODE :
# You can set the following things freely for each motor.
# (1) Angle of steering motors, (3) Velocity of driving wheels
#
# RESTART_MODE : 
# This set all the gain default values (Encoder is not reset)
#

uint8 drive_mode
uint8 STOP_MODE=0
uint8 TURN_MODE=1
uint8 DRIVE_MODE=2
uint8 MANUAL_MODE=3
uint8 RESTART_MODE=4

#
# drive_id : selection of motor id (This decides which motor is processed/unprocessed.)
# ID0 : Left  front wheel 
# ID1 : Left  back  wheel 
# ID2 : Right back wheel 
# ID3 : Right front wheel 
# This setting is valid when the "drive_mode" is TURN_MODE/DRIVE_MODE/MANUAL_MODE.
# 
# Set each element of "drive_id" TRUE for activation and FALSE for deactivation.
# drive_id[0] : Left  front wheel 
# drive_id[1] : Left  back  wheel 
# drive_id[2] : Right back wheel 
# drive_id[3] : Right front wheel 
# If you set FALSE for some axes, the motors of the axes will be deactivated (free motors). 
#

uint8[4] drive_id

#
# each_vel : desired velocity of each drive wheel
# This setting is valid when the "drive_mode" is MANUAL_MODE.
# 
# Set each element of "each_vel" as the desired velocity [mm/s].
# each_vel[0] : Left  front wheel 
# each_vel[1] : Left  back  wheel 
# each_vel[2] : Right back wheel 
# each_vel[3] : Right front wheel 
#

float32[4] each_vel

#
# each_ang : desired angle of each steering motor
# This setting is valid when the "drive_mode" is MANUAL_MODE.
# 
# Set each element of "each_ang" as the desired angle [deg].
# each_ang[0] : Left  front wheel 
# each_ang[1] : Left  back  wheel 
# each_ang[2] : Right back wheel 
# each_ang[3] : Right front wheel 
#

float32[4] each_ang

#
# all_vel : desired velocity of all drive wheels
# This setting is valid when the "drive_mode" is TURN_MODE/DRIVE_MODE.
# 
# Set "all_vel" as the desired velocity [mm/s].
# Then the desired velocities of all driving wheels are set. 
#

float32 all_vel

#
# all_ang : desired angle of all steering motors
# This setting is valid when the "drive_mode" is DRIVE_MODE.
# 
# Set "all_ang" as the desired angle [deg].
# Then the desired angles of all steering motors are set. 
#

float32 all_ang

# ====================================================================================
# Message when gain_flag is TRUE
# ====================================================================================

#
# gain_id_ch : selection of motor id (This decides which gain is set/ignored.)
# 
# Set each element of "gain_id_ch0" and "gain_id_ch1" TRUE for activation and FALSE for deactivation.
# gain_id_ch0[0] : Left  front driving wheel 
# gain_id_ch0[1] : Left  back  driving wheel 
# gain_id_ch0[2] : Right back  driving wheel 
# gain_id_ch0[3] : Right front driving wheel 
# gain_id_ch1[0] : Left  front steering motor 
# gain_id_ch1[1] : Left  back  steering motor 
# gain_id_ch1[2] : Right back  steering motor 
# gain_id_ch1[3] : Right front steering motor 
#

uint8[4] gain_id_ch0
uint8[4] gain_id_ch1

#
# gain_ch : propotional gain setting for each motor (P control)
# 
# Set each element of "gain_ch" as the desired propotional gain.
# gain_ch0[0] : Left  front driving wheel 
# gain_ch0[1] : Left  back  driving wheel 
# gain_ch0[2] : Right back  driving wheel 
# gain_ch0[3] : Right front driving wheel 
# gain_ch1[0] : Left  front steering motor 
# gain_ch1[1] : Left  back  steering motor 
# gain_ch1[2] : Right back  steering motor 
# gain_ch1[3] : Right front steering motor 
#

int16[4] gain_ch0
int16[4] gain_ch1

# ====================================================================================
# Message when encoder_flag is TRUE
# ====================================================================================

#
# encoder_id_ch : selection of motor id (This decides which motor encoder is reset.)
# 
# Set each element of "encoder_id_ch0" and "encoder_id_ch1" TRUE for activation and FALSE for deactivation.
# encoder_id_ch0[0] : Left  front driving wheel 
# encoder_id_ch0[1] : Left  back  driving wheel 
# encoder_id_ch0[2] : Right back  driving wheel 
# encoder_id_ch0[3] : Right front driving wheel 
# encoder_id_ch1[0] : Left  front steering motor 
# encoder_id_ch1[1] : Left  back  steering motor 
# encoder_id_ch1[2] : Right back  steering motor 
# encoder_id_ch1[3] : Right front steering motor 
#

uint8[4] encoder_id_ch0
uint8[4] encoder_id_ch1

#
# encoder_ch : encoder reset value setting for each motor
# 
# Set each element of "encoder_ch" as the encoder value after reset.
# encoder_ch0[0] : Left  front driving wheel 
# encoder_ch0[1] : Left  back  driving wheel 
# encoder_ch0[2] : Right back  driving wheel 
# encoder_ch0[3] : Right front driving wheel 
# encoder_ch1[0] : Left  front steering motor 
# encoder_ch1[1] : Left  back  steering motor 
# encoder_ch1[2] : Right back  steering motor 
# encoder_ch1[3] : Right front steering motor 
#

int32[4] encoder_ch0
int32[4] encoder_ch1


"""
  # Pseudo-constants
  FALSE = 0
  TRUE = 1
  STOP_MODE = 0
  TURN_MODE = 1
  DRIVE_MODE = 2
  MANUAL_MODE = 3
  RESTART_MODE = 4

  __slots__ = ['drive_flag','gain_flag','encoder_flag','drive_mode','drive_id','each_vel','each_ang','all_vel','all_ang','gain_id_ch0','gain_id_ch1','gain_ch0','gain_ch1','encoder_id_ch0','encoder_id_ch1','encoder_ch0','encoder_ch1']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8[4]','float32[4]','float32[4]','float32','float32','uint8[4]','uint8[4]','int16[4]','int16[4]','uint8[4]','uint8[4]','int32[4]','int32[4]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       drive_flag,gain_flag,encoder_flag,drive_mode,drive_id,each_vel,each_ang,all_vel,all_ang,gain_id_ch0,gain_id_ch1,gain_ch0,gain_ch1,encoder_id_ch0,encoder_id_ch1,encoder_ch0,encoder_ch1

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CartCommand, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.drive_flag is None:
        self.drive_flag = 0
      if self.gain_flag is None:
        self.gain_flag = 0
      if self.encoder_flag is None:
        self.encoder_flag = 0
      if self.drive_mode is None:
        self.drive_mode = 0
      if self.drive_id is None:
        self.drive_id = chr(0)*4
      if self.each_vel is None:
        self.each_vel = [0.,0.,0.,0.]
      if self.each_ang is None:
        self.each_ang = [0.,0.,0.,0.]
      if self.all_vel is None:
        self.all_vel = 0.
      if self.all_ang is None:
        self.all_ang = 0.
      if self.gain_id_ch0 is None:
        self.gain_id_ch0 = chr(0)*4
      if self.gain_id_ch1 is None:
        self.gain_id_ch1 = chr(0)*4
      if self.gain_ch0 is None:
        self.gain_ch0 = [0,0,0,0]
      if self.gain_ch1 is None:
        self.gain_ch1 = [0,0,0,0]
      if self.encoder_id_ch0 is None:
        self.encoder_id_ch0 = chr(0)*4
      if self.encoder_id_ch1 is None:
        self.encoder_id_ch1 = chr(0)*4
      if self.encoder_ch0 is None:
        self.encoder_ch0 = [0,0,0,0]
      if self.encoder_ch1 is None:
        self.encoder_ch1 = [0,0,0,0]
    else:
      self.drive_flag = 0
      self.gain_flag = 0
      self.encoder_flag = 0
      self.drive_mode = 0
      self.drive_id = chr(0)*4
      self.each_vel = [0.,0.,0.,0.]
      self.each_ang = [0.,0.,0.,0.]
      self.all_vel = 0.
      self.all_ang = 0.
      self.gain_id_ch0 = chr(0)*4
      self.gain_id_ch1 = chr(0)*4
      self.gain_ch0 = [0,0,0,0]
      self.gain_ch1 = [0,0,0,0]
      self.encoder_id_ch0 = chr(0)*4
      self.encoder_id_ch1 = chr(0)*4
      self.encoder_ch0 = [0,0,0,0]
      self.encoder_ch1 = [0,0,0,0]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4B.pack(_x.drive_flag, _x.gain_flag, _x.encoder_flag, _x.drive_mode))
      _x = self.drive_id
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_4B.pack(*_x))
      else:
        buff.write(_struct_4s.pack(_x))
      buff.write(_struct_4f.pack(*self.each_vel))
      buff.write(_struct_4f.pack(*self.each_ang))
      _x = self
      buff.write(_struct_2f.pack(_x.all_vel, _x.all_ang))
      _x = self.gain_id_ch0
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_4B.pack(*_x))
      else:
        buff.write(_struct_4s.pack(_x))
      _x = self.gain_id_ch1
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_4B.pack(*_x))
      else:
        buff.write(_struct_4s.pack(_x))
      buff.write(_struct_4h.pack(*self.gain_ch0))
      buff.write(_struct_4h.pack(*self.gain_ch1))
      _x = self.encoder_id_ch0
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_4B.pack(*_x))
      else:
        buff.write(_struct_4s.pack(_x))
      _x = self.encoder_id_ch1
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_4B.pack(*_x))
      else:
        buff.write(_struct_4s.pack(_x))
      buff.write(_struct_4i.pack(*self.encoder_ch0))
      buff.write(_struct_4i.pack(*self.encoder_ch1))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.drive_flag, _x.gain_flag, _x.encoder_flag, _x.drive_mode,) = _struct_4B.unpack(str[start:end])
      start = end
      end += 4
      self.drive_id = str[start:end]
      start = end
      end += 16
      self.each_vel = _struct_4f.unpack(str[start:end])
      start = end
      end += 16
      self.each_ang = _struct_4f.unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.all_vel, _x.all_ang,) = _struct_2f.unpack(str[start:end])
      start = end
      end += 4
      self.gain_id_ch0 = str[start:end]
      start = end
      end += 4
      self.gain_id_ch1 = str[start:end]
      start = end
      end += 8
      self.gain_ch0 = _struct_4h.unpack(str[start:end])
      start = end
      end += 8
      self.gain_ch1 = _struct_4h.unpack(str[start:end])
      start = end
      end += 4
      self.encoder_id_ch0 = str[start:end]
      start = end
      end += 4
      self.encoder_id_ch1 = str[start:end]
      start = end
      end += 16
      self.encoder_ch0 = _struct_4i.unpack(str[start:end])
      start = end
      end += 16
      self.encoder_ch1 = _struct_4i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4B.pack(_x.drive_flag, _x.gain_flag, _x.encoder_flag, _x.drive_mode))
      _x = self.drive_id
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_4B.pack(*_x))
      else:
        buff.write(_struct_4s.pack(_x))
      buff.write(self.each_vel.tostring())
      buff.write(self.each_ang.tostring())
      _x = self
      buff.write(_struct_2f.pack(_x.all_vel, _x.all_ang))
      _x = self.gain_id_ch0
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_4B.pack(*_x))
      else:
        buff.write(_struct_4s.pack(_x))
      _x = self.gain_id_ch1
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_4B.pack(*_x))
      else:
        buff.write(_struct_4s.pack(_x))
      buff.write(self.gain_ch0.tostring())
      buff.write(self.gain_ch1.tostring())
      _x = self.encoder_id_ch0
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_4B.pack(*_x))
      else:
        buff.write(_struct_4s.pack(_x))
      _x = self.encoder_id_ch1
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_4B.pack(*_x))
      else:
        buff.write(_struct_4s.pack(_x))
      buff.write(self.encoder_ch0.tostring())
      buff.write(self.encoder_ch1.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.drive_flag, _x.gain_flag, _x.encoder_flag, _x.drive_mode,) = _struct_4B.unpack(str[start:end])
      start = end
      end += 4
      self.drive_id = str[start:end]
      start = end
      end += 16
      self.each_vel = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 16
      self.each_ang = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      _x = self
      start = end
      end += 8
      (_x.all_vel, _x.all_ang,) = _struct_2f.unpack(str[start:end])
      start = end
      end += 4
      self.gain_id_ch0 = str[start:end]
      start = end
      end += 4
      self.gain_id_ch1 = str[start:end]
      start = end
      end += 8
      self.gain_ch0 = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=4)
      start = end
      end += 8
      self.gain_ch1 = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=4)
      start = end
      end += 4
      self.encoder_id_ch0 = str[start:end]
      start = end
      end += 4
      self.encoder_id_ch1 = str[start:end]
      start = end
      end += 16
      self.encoder_ch0 = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=4)
      start = end
      end += 16
      self.encoder_ch1 = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4s = struct.Struct("<4s")
_struct_2f = struct.Struct("<2f")
_struct_4h = struct.Struct("<4h")
_struct_4i = struct.Struct("<4i")
_struct_4f = struct.Struct("<4f")
_struct_4B = struct.Struct("<4B")
