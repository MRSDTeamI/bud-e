/* Auto-generated by genmsg_cpp for file /home/gautam/hearbo_2dnav/hearbo_cart_ts/hearbo_cart_msgs/msg/CartVelocity.msg */
#ifndef HEARBO_CART_MSGS_MESSAGE_CARTVELOCITY_H
#define HEARBO_CART_MSGS_MESSAGE_CARTVELOCITY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace hearbo_cart_msgs
{
template <class ContainerAllocator>
struct CartVelocity_ {
  typedef CartVelocity_<ContainerAllocator> Type;

  CartVelocity_()
  : velocity_x(0.0)
  , velocity_y(0.0)
  , velocity_rot(0.0)
  {
  }

  CartVelocity_(const ContainerAllocator& _alloc)
  : velocity_x(0.0)
  , velocity_y(0.0)
  , velocity_rot(0.0)
  {
  }

  typedef double _velocity_x_type;
  double velocity_x;

  typedef double _velocity_y_type;
  double velocity_y;

  typedef double _velocity_rot_type;
  double velocity_rot;


  typedef boost::shared_ptr< ::hearbo_cart_msgs::CartVelocity_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hearbo_cart_msgs::CartVelocity_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CartVelocity
typedef  ::hearbo_cart_msgs::CartVelocity_<std::allocator<void> > CartVelocity;

typedef boost::shared_ptr< ::hearbo_cart_msgs::CartVelocity> CartVelocityPtr;
typedef boost::shared_ptr< ::hearbo_cart_msgs::CartVelocity const> CartVelocityConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::hearbo_cart_msgs::CartVelocity_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::hearbo_cart_msgs::CartVelocity_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace hearbo_cart_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hearbo_cart_msgs::CartVelocity_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hearbo_cart_msgs::CartVelocity_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hearbo_cart_msgs::CartVelocity_<ContainerAllocator> > {
  static const char* value() 
  {
    return "94229bd71d5361c95436a6dfadea58b2";
  }

  static const char* value(const  ::hearbo_cart_msgs::CartVelocity_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x94229bd71d5361c9ULL;
  static const uint64_t static_value2 = 0x5436a6dfadea58b2ULL;
};

template<class ContainerAllocator>
struct DataType< ::hearbo_cart_msgs::CartVelocity_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hearbo_cart_msgs/CartVelocity";
  }

  static const char* value(const  ::hearbo_cart_msgs::CartVelocity_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hearbo_cart_msgs::CartVelocity_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 velocity_x    #positive is forward\n\
float64 velocity_y    #positive is towards the left\n\
float64 velocity_rot  #positive is counter_clockwise\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::hearbo_cart_msgs::CartVelocity_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hearbo_cart_msgs::CartVelocity_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hearbo_cart_msgs::CartVelocity_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.velocity_x);
    stream.next(m.velocity_y);
    stream.next(m.velocity_rot);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CartVelocity_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hearbo_cart_msgs::CartVelocity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::hearbo_cart_msgs::CartVelocity_<ContainerAllocator> & v) 
  {
    s << indent << "velocity_x: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_x);
    s << indent << "velocity_y: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_y);
    s << indent << "velocity_rot: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_rot);
  }
};


} // namespace message_operations
} // namespace ros

#endif // HEARBO_CART_MSGS_MESSAGE_CARTVELOCITY_H

