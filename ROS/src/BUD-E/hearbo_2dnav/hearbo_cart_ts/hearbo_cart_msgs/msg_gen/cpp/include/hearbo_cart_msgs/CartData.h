/* Auto-generated by genmsg_cpp for file /home/gautam/hearbo_2dnav/hearbo_cart_ts/hearbo_cart_msgs/msg/CartData.msg */
#ifndef HEARBO_CART_MSGS_MESSAGE_CARTDATA_H
#define HEARBO_CART_MSGS_MESSAGE_CARTDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "hearbo_cart_msgs/EncVal.h"

namespace hearbo_cart_msgs
{
template <class ContainerAllocator>
struct CartData_ {
  typedef CartData_<ContainerAllocator> Type;

  CartData_()
  : header()
  , ch()
  {
  }

  CartData_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , ch()
  {
    ch.assign( ::hearbo_cart_msgs::EncVal_<ContainerAllocator> (_alloc));
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef boost::array< ::hearbo_cart_msgs::EncVal_<ContainerAllocator> , 2>  _ch_type;
  boost::array< ::hearbo_cart_msgs::EncVal_<ContainerAllocator> , 2>  ch;


  typedef boost::shared_ptr< ::hearbo_cart_msgs::CartData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hearbo_cart_msgs::CartData_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CartData
typedef  ::hearbo_cart_msgs::CartData_<std::allocator<void> > CartData;

typedef boost::shared_ptr< ::hearbo_cart_msgs::CartData> CartDataPtr;
typedef boost::shared_ptr< ::hearbo_cart_msgs::CartData const> CartDataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::hearbo_cart_msgs::CartData_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::hearbo_cart_msgs::CartData_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace hearbo_cart_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hearbo_cart_msgs::CartData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hearbo_cart_msgs::CartData_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hearbo_cart_msgs::CartData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "321b938e799bcee6695873279fe47f5c";
  }

  static const char* value(const  ::hearbo_cart_msgs::CartData_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x321b938e799bcee6ULL;
  static const uint64_t static_value2 = 0x695873279fe47f5cULL;
};

template<class ContainerAllocator>
struct DataType< ::hearbo_cart_msgs::CartData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hearbo_cart_msgs/CartData";
  }

  static const char* value(const  ::hearbo_cart_msgs::CartData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hearbo_cart_msgs::CartData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#\n\
# Received Data from the iXs cart\n\
#\n\
# header : time stamp and frame id\n\
# ch[0] : Encoder values of the driving wheels\n\
# ch[1] : Encoder values of the steering motor\n\
\n\
Header header\n\
EncVal[2] ch\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: hearbo_cart_msgs/EncVal\n\
# Encoder value for all the wheels of the iXs cart\n\
# data[0] : ID = 0 : Left  forward wheel\n\
# data[1] : ID = 1 : Left  back    wheel\n\
# data[2] : ID = 2 : Right back    wheel\n\
# data[3] : ID = 3 : Right forward wheel\n\
\n\
uint32[4] data\n\
\n\
";
  }

  static const char* value(const  ::hearbo_cart_msgs::CartData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::hearbo_cart_msgs::CartData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::hearbo_cart_msgs::CartData_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hearbo_cart_msgs::CartData_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.ch);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CartData_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hearbo_cart_msgs::CartData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::hearbo_cart_msgs::CartData_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ch[]" << std::endl;
    for (size_t i = 0; i < v.ch.size(); ++i)
    {
      s << indent << "  ch[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hearbo_cart_msgs::EncVal_<ContainerAllocator> >::stream(s, indent + "    ", v.ch[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // HEARBO_CART_MSGS_MESSAGE_CARTDATA_H

